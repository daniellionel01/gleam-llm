[[{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gpt5","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gpt4o","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"o4mini","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude37_sonnet","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25flash","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25pro","eval":"valid"}],[{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(action: fn() -> Nil, cont: fn(Nil) -> a) -> a {\n  let result = cont(Nil)\n  let _ = action()\n  result\n}\n\npub fn main() {\n  use _ <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"gpt5","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  use _ <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}\n\npub fn defer(action: fn() -> Nil) -> Result(Nil, Nil) {\n  Result(fn(callback) { Result(action(), callback(Nil)) })\n}","model":"gpt4o","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(deferred: fn() -> Nil, callback: fn(Nil) -> Nil) -> Nil {\n  callback(Nil)\n  deferred()\n}\n\npub fn main() {\n  use _ <- defer(fn() { io.println(\"hello\") })\n    io.println(\"1\")\n}","model":"o4mini","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}\n\nfn defer(deferred: fn() -> Nil, callback: fn() -> a) -> a {\n  let result = callback()\n  deferred()\n  result\n}","model":"claude37_sonnet","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(cleanup: fn() -> Nil, callback: fn() -> a) -> a {\n  let result = callback()\n  cleanup()\n  result\n}\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\n/// A utility function to simulate `defer` by executing a cleanup function\n/// after the main block of code.\n///\n/// It takes two function arguments:\n/// 1. `cleanup_action`: A function that will be called after `user_block` has executed.\n/// 2. `user_block`: The main block of code to be executed, provided by the `use` syntax.\n///\n/// The return value of `user_block` is passed through.\npub fn defer(cleanup_action: fn() -> Nil, user_block: fn() -> a) -> a {\n  let result = user_block()\n  cleanup_action()\n  result\n}\n\npub fn main() {\n  use <- defer(fn() {\n    io.println(\"hello\")\n  })\n    io.println(\"1\")\n}","model":"gemini25flash","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(action: fn() -> a, body: fn() -> b) -> b {\n  let result = body()\n  let _ = action()\n  result\n}\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"gemini25pro","eval":"valid"}],[{"case_":{"id":"matrix","title":"Matrix","contents":"\nWrite a Gleam program that defines a function transpose(matrix: List(List(Int))) -> List(List(Int)) which takes a matrix of integers and returns its transpose.\nThe transpose flips rows into columns, so the element at position (i, j) becomes (j, i).\nInclude a main function that exclusively prints the transpose of [[1, 2, 3], [4, 5, 6]], nothing else.\n","deps":[]},"program":"import gleam/list\nimport gleam/option.{type Option, None, Some}\n\npub fn transpose(matrix: List(List(Int))) -> List(List(Int)) {\n  case split(matrix, [], []) {\n    Some(#([], _)) -> []\n    Some(#(heads, tails)) -> [heads, ..transpose(tails)]\n    None -> []\n  }\n}\n\nfn split(\n  rows: List(List(Int)),\n  heads: List(Int),\n  tails: List(List(Int)),\n) -> Option(#(List(Int), List(List(Int)))) {\n  case rows {\n    [] -> Some(#(list.reverse(heads), list.reverse(tails)))\n    [first, ..rest] ->\n      case first {\n        [h, ..t] -> split(rest, [h, ..heads], [t, ..tails])\n        [] -> None\n      }\n  }\n}\n\npub fn main() {\n  echo transpose([[1, 2, 3], [4, 5, 6]])\n}","model":"gpt5","eval":"invalid"},{"case_":{"id":"matrix","title":"Matrix","contents":"\nWrite a Gleam program that defines a function transpose(matrix: List(List(Int))) -> List(List(Int)) which takes a matrix of integers and returns its transpose.\nThe transpose flips rows into columns, so the element at position (i, j) becomes (j, i).\nInclude a main function that exclusively prints the transpose of [[1, 2, 3], [4, 5, 6]], nothing else.\n","deps":[]},"program":"import gleam/io\nimport gleam/list\n\npub fn transpose(matrix: List(List(Int))) -> List(List(Int)) {\n  case matrix {\n    [] -> []\n    [[] | _] -> []\n    _ -> [\n      [list.head(row) || row <- matrix],\n      ..transpose([list.drop_start(row, 1) || row <- matrix])\n    ]\n  }\n}\n\npub fn main() {\n  io.println(transpose([[1, 2, 3], [4, 5, 6]]))\n}","model":"gpt4o","eval":"compile_error"},{"case_":{"id":"matrix","title":"Matrix","contents":"\nWrite a Gleam program that defines a function transpose(matrix: List(List(Int))) -> List(List(Int)) which takes a matrix of integers and returns its transpose.\nThe transpose flips rows into columns, so the element at position (i, j) becomes (j, i).\nInclude a main function that exclusively prints the transpose of [[1, 2, 3], [4, 5, 6]], nothing else.\n","deps":[]},"program":"import gleam/io.{echo}\nimport gleam/list.{map}\n\npub fn transpose(matrix: List(List(Int))) -> List(List(Int)) {\n  case matrix {\n    [] -> []\n    [[] , ..] -> []\n    rows -> {\n      let heads = map(rows, fn(r) { case r { [h, ..] -> h } })\n      let tails = map(rows, fn(r) { case r { [_ , ..t] -> t } })\n      [heads, ..transpose(tails)]\n    }\n  }\n}\n\npub fn main() {\n  echo transpose([[1, 2, 3], [4, 5, 6]])\n}","model":"o4mini","eval":"compile_error"},{"case_":{"id":"matrix","title":"Matrix","contents":"\nWrite a Gleam program that defines a function transpose(matrix: List(List(Int))) -> List(List(Int)) which takes a matrix of integers and returns its transpose.\nThe transpose flips rows into columns, so the element at position (i, j) becomes (j, i).\nInclude a main function that exclusively prints the transpose of [[1, 2, 3], [4, 5, 6]], nothing else.\n","deps":[]},"program":"import gleam/list\nimport gleam/io\nimport gleam/string\n\npub fn main() {\n  let matrix = [[1, 2, 3], [4, 5, 6]]\n  let transposed = transpose(matrix)\n  \n  format_matrix(transposed)\n  |> io.println\n}\n\npub fn transpose(matrix: List(List(Int))) -> List(List(Int)) {\n  case matrix {\n    [] -> []\n    [[], ..] -> []\n    _ -> {\n      let first_column = list.map(matrix, fn(row) {\n        list.first(row)\n        |> list.unwrap([])\n      })\n      \n      let rest = list.map(matrix, fn(row) {\n        list.drop(row, 1)\n      })\n      \n      [first_column, ..transpose(rest)]\n    }\n  }\n}\n\nfn format_matrix(matrix: List(List(Int))) -> String {\n  matrix\n  |> list.map(fn(row) {\n    row\n    |> list.map(string.inspect)\n    |> string.join(\", \")\n    |> fn(s) { \"[\" <> s <> \"]\" }\n  })\n  |> string.join(\", \")\n  |> fn(s) { \"[\" <> s <> \"]\" }\n}","model":"claude37_sonnet","eval":"compile_error"},{"case_":{"id":"matrix","title":"Matrix","contents":"\nWrite a Gleam program that defines a function transpose(matrix: List(List(Int))) -> List(List(Int)) which takes a matrix of integers and returns its transpose.\nThe transpose flips rows into columns, so the element at position (i, j) becomes (j, i).\nInclude a main function that exclusively prints the transpose of [[1, 2, 3], [4, 5, 6]], nothing else.\n","deps":[]},"program":"import gleam/io\nimport gleam/list\nimport gleam/int\n\npub fn transpose(matrix: List(List(Int))) -> List(List(Int)) {\n  case matrix {\n    [] -> []\n    [[] | _] -> []\n    _ -> {\n      let first_column = list.map(matrix, fn(row) {\n        case row {\n          [first, ..] -> first\n          [] -> panic as \"Empty row in matrix\"\n        }\n      })\n      let rest_matrix = list.map(matrix, fn(row) {\n        case row {\n          [_, ..rest] -> rest\n          [] -> []\n        }\n      })\n      [first_column, ..transpose(rest_matrix)]\n    }\n  }\n}\n\npub fn main() {\n  let matrix = [[1, 2, 3], [4, 5, 6]]\n  let result = transpose(matrix)\n  io.debug(result)\n}","model":"claude_sonnet4","eval":"compile_error"},{"case_":{"id":"matrix","title":"Matrix","contents":"\nWrite a Gleam program that defines a function transpose(matrix: List(List(Int))) -> List(List(Int)) which takes a matrix of integers and returns its transpose.\nThe transpose flips rows into columns, so the element at position (i, j) becomes (j, i).\nInclude a main function that exclusively prints the transpose of [[1, 2, 3], [4, 5, 6]], nothing else.\n","deps":[]},"program":"import gleam/list\nimport gleam/io\n\npub fn transpose(matrix: List(List(Int))) -> List(List(Int)) {\n  case matrix {\n    [] -> []\n    [first_row, ..] if list.is_empty(first_row) -> []\n    rows -> {\n      let first_column_as_row = list.map(rows, fn(row) {\n        case row {\n          [head, ..] -> head\n          [] -> panic as \"Non-rectangular matrix encountered: row is shorter than previous rows.\"\n        }\n      })\n\n      let remaining_matrix = list.map(rows, list.drop_left(1))\n\n      [first_column_as_row, ..transpose(remaining_matrix)]\n    }\n  }\n}\n\npub fn main() {\n  let matrix = [[1, 2, 3], [4, 5, 6]]\n  let transposed_matrix = transpose(matrix)\n  io.println(transposed_matrix)\n}","model":"gemini25flash","eval":"compile_error"},{"case_":{"id":"matrix","title":"Matrix","contents":"\nWrite a Gleam program that defines a function transpose(matrix: List(List(Int))) -> List(List(Int)) which takes a matrix of integers and returns its transpose.\nThe transpose flips rows into columns, so the element at position (i, j) becomes (j, i).\nInclude a main function that exclusively prints the transpose of [[1, 2, 3], [4, 5, 6]], nothing else.\n","deps":[]},"program":"import gleam/list\n\npub fn transpose(matrix: List(List(Int))) -> List(List(Int)) {\n  case matrix {\n    [] -> []\n    [[] | ..] -> []\n    _ -> {\n      let #(heads, tails) =\n        list.fold(from: matrix, over: #([], []), with: fn(acc, row) {\n          let #(h_acc, t_acc) = acc\n          let [head, ..tail] = row\n          #([head, ..h_acc], [tail, ..t_acc])\n        })\n\n      [\n        list.reverse(heads),\n        ..transpose(list.reverse(tails)),\n      ]\n    }\n  }\n}\n\npub fn main() {\n  [[1, 2, 3], [4, 5, 6]]\n  |> transpose\n  |> echo\n}","model":"gemini25pro","eval":"compile_error"}]]