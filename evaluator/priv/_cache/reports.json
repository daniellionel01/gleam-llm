[[{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"g_p_t4o","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"o4mini","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude37_sonnet","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25flash","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25pro","eval":"valid"}],[{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  use _ <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}\n\npub fn defer(action: fn() -> Nil) -> Result(Nil, Nil) {\n  Result(fn() {\n    action()\n    Nil\n  })\n}","model":"g_p_t4o","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(deferred: fn() -> Nil) -> fn(fn(Nil) -> a) -> a {\n  fn(callback) {\n    let result = callback(Nil)\n    deferred()\n    result\n  }\n}\n\npub fn main() {\n  use _ <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"o4mini","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}\n\npub fn defer(callback: fn() -> a, continuation: fn() -> b) -> b {\n  let result = continuation()\n  callback()\n  result\n}","model":"claude37_sonnet","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(cleanup: fn() -> Nil, callback: fn() -> a) -> a {\n  let result = callback()\n  cleanup()\n  result\n}\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"1\")\n  use _ <- defer(fn() { io.println(\"hello\") })\n}\n\npub fn defer(clean_up_action: fn() -> Nil, main_block: fn(Nil) -> a) -> a {\n  let result = main_block(Nil)\n  clean_up_action()\n  result\n}","model":"gemini25flash","eval":"invalid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\nfn defer(deferred_action: fn() -> a, main_action: fn() -> b) -> b {\n  let result = main_action()\n  deferred_action()\n  result\n}\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"gemini25pro","eval":"valid"}]]