[[{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"g_p_t4o","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"o4mini","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude37_sonnet","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25flash","eval":"valid"},{"case_":{"id":"hello","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25pro","eval":"valid"}],[{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(action: fn() -> a) -> Result(b, Nil) {\n  use cleanup <- result.try(fn(inner_cleanup) {\n    action()\n    inner_cleanup\n  })\n  Ok(cleanup)\n}\n\npub fn main() {\n  use _clean <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"g_p_t4o","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(callback: fn() -> Nil) -> fn(block: fn(Nil) -> Nil) -> Nil {\n  fn(block) {\n    block(Nil)\n    callback()\n  }\n}\n\npub fn main() {\n  use _ <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"o4mini","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}\n\npub fn defer(cleanup: fn() -> Nil, continuation: fn() -> a) -> a {\n  let result = continuation()\n  cleanup()\n  result\n}","model":"claude37_sonnet","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}\n\npub fn defer(cleanup: fn() -> Nil, callback: fn() -> a) -> a {\n  let result = callback()\n  cleanup()\n  result\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\n/// A utility function that executes a given `action` after the `next`\n/// function (which represents the body of the `use` block) has completed.\n///\n/// This mimics a \"defer\" or \"finally\" mechanism by reordering the execution.\n/// The `use` keyword transforms `use value <- defer(action)` into\n/// `defer(action, fn(value) { ...body... })`.\n///\n/// The `action` is the function to be deferred, taking no arguments and returning Nil.\n/// The `next` is the continuation, representing the code that follows in the\n/// `use` block, taking the value returned by `defer`'s first part (`Nil` in this case)\n/// and returning a value of type `T`.\n/// The `defer` function itself returns `T`, which is the result of the `next` function.\npub fn defer(action: fn() -> Nil, next: fn(Nil) -> T) -> T {\n  // First, execute the \"next\" part of the code, which is the body\n  // of the `use` block.\n  let result = next(Nil)\n\n  // After the `use` block's body has executed, perform the deferred action.\n  action()\n\n  // Return the result of the `use` block's body.\n  result\n}\n\npub fn main() {\n  io.println(\"1\")\n\n  // Demonstrate deferring a print statement.\n  // The `fn() { io.println(\"hello\") }` will be executed after\n  // the code inside the `use` block.\n  use _ <- defer(fn() { io.println(\"hello\") })\n\n  // This line is inside the `use` block, so it runs *before* the deferred action.\n  io.println(\"2\")\n}","model":"gemini25flash","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\nfn defer(action: fn() -> a, run: fn() -> b) -> b {\n  let result = run()\n  let _ = action()\n  result\n}\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"gemini25pro","eval":"valid"}]]