[[{"case_":{"id":"hello-world","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"g_p_t4o","eval":"valid"},{"case_":{"id":"hello-world","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"o4mini","eval":"valid"},{"case_":{"id":"hello-world","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude37_sonnet","eval":"valid"},{"case_":{"id":"hello-world","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"hello-world","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25flash","eval":"valid"},{"case_":{"id":"hello-world","title":"Hello World!","contents":"A program that outputs 'hello, world!'","deps":[]},"program":"import gleam/io\n\npub fn main() {\n  io.println(\"hello, world!\")\n}","model":"gemini25pro","eval":"valid"}],[{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam.io\n\npub fn defer(callback: fn() -> Nil) -> fn() -> Nil {\n  fn() {\n    callback()\n  }\n}\n\npub fn main() {\n  let deferred = defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n  deferred()\n}","model":"g_p_t4o","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"pub fn defer(main_fn: fn() -> Nil, cleanup: fn() -> Nil) {\n  main_fn()\n  cleanup()\n}\n\nuse main.{defer}\nimport io\n\npub fn main() {\n  defer(\n    fn() { io.println(\"1\") },\n    fn() { io.println(\"hello\") },\n  )\n}","model":"o4mini","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\nfn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}\n\npub fn defer(deferred: fn() -> a, next: fn() -> b) -> b {\n  let result = next()\n  deferred()\n  result\n}","model":"claude37_sonnet","eval":"invalid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(cleanup: fn() -> Nil, callback: fn() -> a) -> a {\n  let result = callback()\n  cleanup()\n  result\n}\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"claude_sonnet4","eval":"valid"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\n/// Defers the execution of a given function until the current scope exits.\n///\n/// This function is intended to be used with Gleam's `use` keyword,\n/// which automatically calls the returned cleanup function when the\n/// block it's defined in finishes execution.\n///\n/// ## Example\n/// \n/// import gleam/io\n/// import my_module/defer\n///\n/// pub fn main() {\n///   io.println(\"This prints first.\")\n///   use _ = defer.defer(fn() { io.println(\"This prints last.\") })\n///   io.println(\"This prints second.\")\n///   // \"This prints last.\" will be printed after \"This prints second.\"\n///   // and before the `main` function exits.\n/// }\n/// \npub fn defer(action: fn() -> Nil) -> fn() -> Nil {\n  // We return a new function that simply calls the `action` provided.\n  // Gleam's `use` keyword will automatically call this returned function\n  // when the scope where `use _ = defer(...)` is declared exits.\n  fn() {\n    action()\n  }\n}\n\npub fn main() {\n  io.println(\"1\")\n  // Defer printing \"hello\". It will be printed when the `main` function's\n  // scope exits, after all other code in `main` has executed.\n  use _ = defer(fn() { io.println(\"hello\") })\n}","model":"gemini25flash","eval":"compile_error"},{"case_":{"id":"defer","title":"Defer","contents":"\nA program that demonstrates a 'defer' utility function. Write the function called 'defer' that can be used via the gleam `use` syntax.\nDemonstrate it by deferring a print of 'hello' and printing '1' before.\n","deps":[]},"program":"import gleam/io\n\npub fn defer(action: fn() -> a) -> fn(fn() -> b) -> b {\n  fn(body: fn() -> b) -> b {\n    let result = body()\n    let _ = action()\n    result\n  }\n}\n\npub fn main() {\n  use <- defer(fn() { io.println(\"hello\") })\n  io.println(\"1\")\n}","model":"gemini25pro","eval":"compile_error"}]]